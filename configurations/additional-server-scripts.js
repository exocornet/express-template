/* eslint-disable @typescript-eslint/no-var-requires, no-console */
const PugLintPlugin = require('puglint-webpack-plugin/lib/linter');

function replacementSCSSAndTS(htmlContent) {
	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ <link> —Ç–µ–≥–æ–≤ —Å href, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–º—Å—è –Ω–∞.scss
	const regexLink = /<link[^>]*?href="\/([^"]+\.scss)[^>]*?>/g;
	const regexScript = /<script[^>]*?src="\/([^"]+\.ts)[^>]*?>/g;

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
	function replacer(match, p1) {
		// ## –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ## //
		const PATH_PARTS_ARR = p1.split('/');
		const FILE_NAME_WITH_EXTENSION = PATH_PARTS_ARR.pop();
		const FILE_NAME = FILE_NAME_WITH_EXTENSION.split('.')[0];

		// ## –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º ## //
		let newTag = `<link href="/css/${FILE_NAME}.css" rel="stylesheet" />`;
		if (FILE_NAME_WITH_EXTENSION.split('.')[1] === 'ts') {
			newTag = `<script src="/js/${FILE_NAME}.js" defer>`;
		}

		return newTag;
	}

	// ## –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ## //
	htmlContent = htmlContent.replace(regexLink, replacer);
	htmlContent = htmlContent.replace(regexScript, replacer);

	return htmlContent;
}

function PugLinter(res, path, options) {
	PugLintPlugin({
		context: 'src',
		files: '**/*.pug',
		config: Object.assign({ emitError: true }, require('../.pug-lintrc.json')),
	}).then((errors) => {
		if (errors) {
			const htmlText = errors.replaceAll('[90m', '<b style="color:red;">').replaceAll('[39m', '</b>');
			res.send(`<pre>${htmlText}</pre>`);
			process.stderr.write(errors);
		} else {
			res.render(path, { ...options }, function (err, html) {
				if (err) {
					process.stderr.write(err);
					throw new Error('Something went wrong in render');
				} else {
					html = replacementSCSSAndTS(html);
					res.send(html);
				}
			});
		}
	});
}

module.exports = { replacementSCSSAndTS, PugLinter };
